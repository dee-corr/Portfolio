{"ast":null,"code":"import d3 from 'd3';\n\nconst createLineChart = data => {\n  const node = document.createElement('div');\n  const margin = data.margins,\n        width = data.width - margin.left - margin.right,\n        height = data.height - margin.top - margin.bottom;\n  const formatDate = d3.time.format(\"%d-%b-%y\");\n  const x = d3.time.scale().range([0, width]);\n  const y = d3.scale.linear().range([height, 0]);\n  const xAxis = d3.svg.axis().scale(x).orient(data.orientXTicks);\n  const yAxis = d3.svg.axis().scale(y).orient(data.orientYTicks);\n  const line = d3.svg.line().x(d => x(d.time)).y(d => y(d.value));\n  const svg = d3.select(node).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  data.dataset.map(el => {\n    if (typeof el.time === 'string') {\n      el.time = formatDate.parse(el.time);\n      el.value = +el.value;\n    }\n  });\n\n  const lineChartParse = data => {\n    data.time = formatDate.parse(data.time);\n    data.value = +data.value;\n    return data;\n  };\n\n  const setLineChartData = (error, dataset) => {\n    if (error) throw error;\n    x.domain(d3.extent(dataset, d => d.time));\n    y.domain(d3.extent(dataset, d => d.value));\n    svg.append(\"g\").attr(\"class\", data.XAxisClasses).attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis);\n    svg.append(\"g\").attr(\"class\", data.YAxisClasses).call(yAxis).append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 6).attr(\"dy\", \".71em\").style(\"text-anchor\", \"end\").text(data.YAxisLabel);\n    svg.append(\"path\").datum(dataset).attr(\"class\", data.lineClass).attr(\"d\", line);\n    return node;\n  };\n\n  return data.tsvFileName !== '' ? d3.tsv(data.tsvFileName, lineChartParse, setLineChartData) : data.csvFileName !== '' ? d3.csv(data.csvFileName, lineChartParse, setLineChartData) : setLineChartData(false, data.dataset, data);\n};\n\nexport default createLineChart;","map":{"version":3,"sources":["C:\\Users\\deirdre.corr\\Documents\\Personal\\Practice\\react\\my-app\\src\\d3\\visionEthnicity.js"],"names":["d3","createLineChart","data","node","document","createElement","margin","margins","width","left","right","height","top","bottom","formatDate","time","format","x","scale","range","y","linear","xAxis","svg","axis","orient","orientXTicks","yAxis","orientYTicks","line","d","value","select","append","attr","dataset","map","el","parse","lineChartParse","setLineChartData","error","domain","extent","XAxisClasses","call","YAxisClasses","style","text","YAxisLabel","datum","lineClass","tsvFileName","tsv","csvFileName","csv"],"mappings":"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","sourcesContent":["import d3 from 'd3';\r\n\r\nconst createLineChart = data => {\r\n\r\n  const node = document.createElement('div');\r\n\r\n  const margin = data.margins,\r\n      width = data.width - margin.left - margin.right,\r\n      height = data.height - margin.top - margin.bottom;\r\n\r\n  const formatDate = d3.time.format(\"%d-%b-%y\");\r\n\r\n  const x = d3.time.scale()\r\n      .range([0, width]);\r\n\r\n  const y = d3.scale.linear()\r\n      .range([height, 0]);\r\n\r\n  const xAxis = d3.svg.axis()\r\n      .scale(x)\r\n      .orient(data.orientXTicks);\r\n\r\n  const yAxis = d3.svg.axis()\r\n      .scale(y)\r\n      .orient(data.orientYTicks);\r\n\r\n  const line = d3.svg.line()\r\n      .x(d => x(d.time))\r\n      .y(d => y(d.value));\r\n\r\n  const svg = d3.select(node).append(\"svg\")\r\n      .attr(\"width\", width + margin.left + margin.right)\r\n      .attr(\"height\", height + margin.top + margin.bottom)\r\n    .append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n  \r\n  data.dataset.map(el => {\r\n    if (typeof el.time === 'string') {\r\n      el.time = formatDate.parse(el.time);\r\n      el.value = +el.value;\r\n    }\r\n  });\r\n\r\n  const lineChartParse = data => {\r\n    data.time = formatDate.parse(data.time);\r\n    data.value = +data.value;\r\n    return data;\r\n  }\r\n\r\n  const setLineChartData = (error, dataset) => {\r\n    if (error) throw error;\r\n\r\n    x.domain(d3.extent(dataset, d => d.time));\r\n    y.domain(d3.extent(dataset, d => d.value));\r\n\r\n    svg.append(\"g\")\r\n        .attr(\"class\", data.XAxisClasses)\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(xAxis);\r\n\r\n    svg.append(\"g\")\r\n        .attr(\"class\", data.YAxisClasses)\r\n        .call(yAxis)\r\n      .append(\"text\")\r\n        .attr(\"transform\", \"rotate(-90)\")\r\n        .attr(\"y\", 6)\r\n        .attr(\"dy\", \".71em\")\r\n        .style(\"text-anchor\", \"end\")\r\n        .text(data.YAxisLabel);\r\n\r\n    svg.append(\"path\")\r\n        .datum(dataset)\r\n        .attr(\"class\", data.lineClass)\r\n        .attr(\"d\", line);\r\n\r\n    return node;\r\n  }\r\n\r\n  return data.tsvFileName !== ''\r\n      ? d3.tsv(data.tsvFileName, lineChartParse, setLineChartData)\r\n      : data.csvFileName !== ''\r\n          ? d3.csv(data.csvFileName, lineChartParse, setLineChartData)\r\n          : setLineChartData(false, data.dataset, data);\r\n\r\n}\r\n\r\nexport default createLineChart;"]},"metadata":{},"sourceType":"module"}