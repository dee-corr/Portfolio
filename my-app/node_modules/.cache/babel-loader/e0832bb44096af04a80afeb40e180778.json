{"ast":null,"code":"import * as d3 from 'd3';\n\nconst createLineChart = data => {\n  // set the dimensions and margins of the graph\n  var margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 60\n  },\n      width = 460 - margin.left - margin.right,\n      height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n  var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //Read the data\n\n  d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/connectedscatter.csv\", // When reading the csv, I must format variables:\n  function (d) {\n    return {\n      date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n      value: d.value\n    };\n  }, // Now I can use this dataset:\n  function (data) {\n    // Add X axis --> it is a date format\n    var x = d3.scaleTime().domain(d3.extent(data, function (d) {\n      return d.date;\n    })).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n    var y = d3.scaleLinear().domain([8000, 9200]).range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y)); // Add the line\n\n    svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"#69b3a2\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    })); // Add the points\n\n    svg.append(\"g\").selectAll(\"dot\").data(data).enter().append(\"circle\").attr(\"cx\", function (d) {\n      return x(d.date);\n    }).attr(\"cy\", function (d) {\n      return y(d.value);\n    }).attr(\"r\", 5).attr(\"fill\", \"#69b3a2\");\n  });\n};\n\nexport default createLineChart;","map":{"version":3,"sources":["C:\\Users\\deirdre.corr\\Documents\\Personal\\Practice\\react\\my-app\\src\\d3\\visionEthnicity.js"],"names":["d3","createLineChart","data","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","d","date","timeParse","value","x","scaleTime","domain","extent","range","call","axisBottom","y","scaleLinear","axisLeft","datum","line","selectAll","enter"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\r\n\r\nconst createLineChart = data => {\r\n\r\n // set the dimensions and margins of the graph\r\nvar margin = {top: 10, right: 30, bottom: 30, left: 60},\r\nwidth = 460 - margin.left - margin.right,\r\nheight = 400 - margin.top - margin.bottom;\r\n// append the svg object to the body of the page\r\nvar svg = d3.select(\"#my_dataviz\")\r\n.append(\"svg\")\r\n.attr(\"width\", width + margin.left + margin.right)\r\n.attr(\"height\", height + margin.top + margin.bottom)\r\n.append(\"g\")\r\n.attr(\"transform\",\r\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n//Read the data\r\nd3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/connectedscatter.csv\",\r\n// When reading the csv, I must format variables:\r\nfunction(d){\r\nreturn { date : d3.timeParse(\"%Y-%m-%d\")(d.date), value : d.value }\r\n},\r\n// Now I can use this dataset:\r\nfunction(data) {\r\n// Add X axis --> it is a date format\r\nvar x = d3.scaleTime()\r\n  .domain(d3.extent(data, function(d) { return d.date; }))\r\n  .range([ 0, width ]);\r\nsvg.append(\"g\")\r\n  .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n  .call(d3.axisBottom(x));\r\n// Add Y axis\r\nvar y = d3.scaleLinear()\r\n  .domain( [8000, 9200])\r\n  .range([ height, 0 ]);\r\nsvg.append(\"g\")\r\n  .call(d3.axisLeft(y));\r\n// Add the line\r\nsvg.append(\"path\")\r\n  .datum(data)\r\n  .attr(\"fill\", \"none\")\r\n  .attr(\"stroke\", \"#69b3a2\")\r\n  .attr(\"stroke-width\", 1.5)\r\n  .attr(\"d\", d3.line()\r\n    .x(function(d) { return x(d.date) })\r\n    .y(function(d) { return y(d.value) })\r\n    )\r\n// Add the points\r\nsvg\r\n  .append(\"g\")\r\n  .selectAll(\"dot\")\r\n  .data(data)\r\n  .enter()\r\n  .append(\"circle\")\r\n    .attr(\"cx\", function(d) { return x(d.date) } )\r\n    .attr(\"cy\", function(d) { return y(d.value) } )\r\n    .attr(\"r\", 5)\r\n    .attr(\"fill\", \"#69b3a2\")\r\n})\r\n\r\n}\r\n\r\nexport default createLineChart;"]},"metadata":{},"sourceType":"module"}